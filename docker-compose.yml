---
## This Docker Compose file handles three responsibilities:
##
## . Linting the project files to ensure they adhere to coding standards.
## . Building the source2adoc application.
## . Testing the application.
##
## When running docker-compose up, all services are orchestrated to execute sequentially, ensuring
## the project is linted, built, and tested efficiently within the Docker environment.
##
## [source, bash]
## ....
## docker compose build
## docker compose up
## ....

services:
  lint-yaml:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-yaml
    image: cytopia/yamllint:latest
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    command: .
    tty: true

  lint-workflows:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-workflows
    image: rhysd/actionlint:latest
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    command: -color
    tty: true

  lint-filenames:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-filenames
    image: lslintorg/ls-lint:1.11.2
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc

  lint-folders:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-folders
    image: sommerfeldio/folderslint:latest
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    command: .
    tty: true

  lint-gherkin:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-gherkin
    image: node:22.6.0-alpine3.19
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    command: ash -c "npm install -g gherkin-lint && gherkin-lint components/test/acceptance-tests/specs"
    tty: true

  lint-go-app:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-go-app
    image: golangci/golangci-lint:v1.59.1
    volumes:
      - ./components/app:/workspaces/source2adoc/components/app
    working_dir: /workspaces/source2adoc/components/app
    command: golangci-lint run -v
    tty: true

  lint-go-acceptance-tests:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-go-acceptance-tests
    image: golangci/golangci-lint:v1.59.1
    volumes:
      - ./components/test/acceptance-tests:/workspaces/source2adoc/components/test/acceptance-tests
    working_dir: /workspaces/source2adoc/components/test/acceptance-tests
    command: golangci-lint run -v
    tty: true

  lint-dockerfile-app:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-dockerfile-app
    image: hadolint/hadolint:latest
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    entrypoint: hadolint Dockerfile.app

  lint-dockerfile-docs:
    container_name: ${COMPOSE_PROJECT_NAME}-lint-dockerfile-docs
    image: hadolint/hadolint:latest
    volumes:
      - .:/workspaces/source2adoc
    working_dir: /workspaces/source2adoc
    entrypoint: hadolint Dockerfile.docs

  app-test:
    container_name: ${COMPOSE_PROJECT_NAME}-app-test
    image: golang:1.22.6-alpine3.19
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./components/app:/workspaces/source2adoc/components/app:rw
      - ./testdata:/workspaces/source2adoc/testdata:ro
    working_dir: /workspaces/source2adoc/components/app
    command:
      - /bin/sh
      - -c
      - |
        rm -rf $${TARGET_DIR}
        rm -f "$${COVERAGE_REPORT}"

        go mod download
        go mod tidy
        go fmt ./...
        go vet ./...
        go test -coverprofile="$${COVERAGE_REPORT}" ./...

        chown 1000:1000 go.sum
        chown 1000:1000 "$${COVERAGE_REPORT}"
        chown -R 1000:1000 $${TARGET_DIR}

        sed -i "s|$${OLD}|$${NEW}|g" "$${COVERAGE_REPORT}"
    environment:
      - COVERAGE_REPORT=go-code-coverage.out
      - OLD=github.com/sommerfeld-io/source2adoc
      - NEW=components/app
      - TARGET_DIR=/workspaces/source2adoc/target

  # app-acceptance-test:
  #   #! PROBLEM: This way the tests cannot work because this image cannot start a docker image
  #   #! which is essential for the tests. The BDD tests are run against the a container.
  #   container_name: ${COMPOSE_PROJECT_NAME}-app-acceptance-test
  #   image: golang:1.22.6-alpine3.19
  #   volumes:
  #     - /etc/timezone:/etc/timezone:ro
  #     - /etc/localtime:/etc/localtime:ro
  #     - ./components/test/acceptance-tests:/workspaces/source2adoc/components/test/acceptance-tests:rw
  #     - ./testdata:/workspaces/source2adoc/testdata:ro
  #   working_dir: /workspaces/source2adoc/components/test/acceptance-tests
  #   command:
  #     - /bin/sh
  #     - -c
  #     - |
  #       go mod download
  #       go mod tidy
  #       go fmt ./...
  #       go vet ./...
  #       go test -coverprofile=go-code-coverage.out

  app:
    container_name: ${COMPOSE_PROJECT_NAME}-app
    image: local/${COMPOSE_PROJECT_NAME}:${DEV_TAG}
    user: 1000:1000
    build:
      context: .
      dockerfile: Dockerfile.app
    volumes:
      - .:/workspaces/source2adoc:rw
    working_dir: /workspaces/source2adoc
    # command: --help
    command: --source-dir . --output-dir ./target
    depends_on:
      app-test:
        condition: service_completed_successfully
      # app-acceptance-test:
      #   condition: service_completed_successfully

  docs:
    container_name: ${COMPOSE_PROJECT_NAME}-docs
    image: local/${COMPOSE_PROJECT_NAME}-docs:${DEV_TAG}
    build:
      context: .
      dockerfile: Dockerfile.docs
    ports:
      - 3080:3000
