---
## The deployment pipeline for the source2adoc app is implemented using GitHub Actions. The primary
## objective of this pipeline is to assess the releasability of the application for deployment with
## every push to the `main` branch. This is achieved through a series of automated tests and
## validations (performed on all branches, but the `main` branch carries the code that should be
## stable and production-ready). The workflow is designed to build every artifact of the source2adoc
## app and subject it to various types of tests to verify its functionality and integrity. If all
## tests are successful, indicating that the project is ready for release, a release candidate is
## generated and published to DockerHub.
##
## The deployment process for the source2adoc app utilizes Docker images. Images are built and
## unit tested. Each Snapshot image is tagged with the commit-sha, providing a clear reference to
## the version of the codebase from which it was generated, and subsequently pushed to DockerHub.
## Following this initial deployment, the Snapshot Docker images undergo further testing (security,
## performance, acceptance, etc.) to assess their performance and stability. If these additional
## tests pass successfully (and the workflow is running on the `main` branch), indicating that the
## Snapshot image is robust and reliable, it is then tagged as a release candidate. Notably, release
## candidates are exclusively published from the `main` branch.
##
## === Release
## link:https://github.com/semantic-release/semantic-release[semantic-release] is used to automate
## the release process.
##
## GitHub Actions does not trigger workflows on release events created by the GitHub Actions
## `GITHUB_TOKEN`. This is a known limitation to prevent recursive workflow runs. To work around
## this, a Personal Access Token (PAT) is used instead of the `GITHUB_TOKEN`. The PAT should have
## the repo scope. This will allow the release event to trigger other workflows.

name: Build + Deployment Pipeline

on:
  push:
    branches-ignore:
      - dependabot/**
    paths-ignore:
      - '**.adoc'
      - '**.md'
      - 'docs/**'
      - '.devcontainer/**'
      - '.vscode/**'
      - '.gitkeep'
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  IMAGE_NAME: source2adoc
  CONTEXT: .
  DOCKERFILE: Dockerfile

permissions:
  contents: read

jobs:
  # ----- Commit stage - lint -------------------

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint:
    runs-on: ubuntu-latest
    name: ${{ matrix.linter }}
    strategy:
      matrix:
        linter: ['yaml', 'workflows', 'filenames', 'folders', 'gherkin']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run lint-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up lint-${{ matrix.linter }} --exit-code-from lint-${{ matrix.linter }}
        shell: bash

  lint-go:
    runs-on: ubuntu-latest
    name: ${{ matrix.linter }}
    strategy:
      matrix:
        linter: ['go-app', 'go-acceptance-tests']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run lint-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up lint-${{ matrix.linter }} --exit-code-from lint-${{ matrix.linter }}
        shell: bash
      - name: Run complexity-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up complexity-${{ matrix.linter }} --exit-code-from complexity-${{ matrix.linter }}
        shell: bash
      - name: Run licenses-${{ matrix.linter }} from docker-compose.yml
        run: docker compose up licenses-${{ matrix.linter }} --exit-code-from licenses-${{ matrix.linter }}
        shell: bash

  # ----- Commit stage - scan -------------------

  sonarcloud:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') }}
    needs: ['lint', 'shellcheck']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Test app
        run: docker compose up test --exit-code-from test
        shell: bash
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v3.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ----- Build stage ---------------------------

  docs:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Adjust version in docs/antora.yml
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{github.ref}}
          file: docs/antora.yml
      - name: Copy adoc files to project root
        run: |
          cp docs/modules/ROOT/pages/index.adoc README.adoc
          cp docs/modules/ROOT/pages/license.adoc LICENSE.adoc
          cp docs/modules/ROOT/pages/license.adoc components/app/LICENSE.adoc
          cp docs/modules/ROOT/pages/license.adoc components/test-acceptance/LICENSE.adoc
          cp docs/modules/ROOT/pages/code-of-conduct.adoc CODE_OF_CONDUCT.adoc
          cp docs/modules/ROOT/pages/contribute.adoc CONTRIBUTING.adoc
          cp docs/modules/ROOT/pages/security.adoc SECURITY.adoc
        shell: bash
      - name: Add do-not-edit remark to adoc files in project root
        run: |
          for file in *.adoc; do

            {
              echo
              echo "// +---------------------------------------------------+"
              echo "// |                                                   |"
              echo "// |        DO NOT EDIT DIRECTLY !!!!!                 |"
              echo "// |                                                   |"
              echo "// |        File is auto-generated by pipeline.        |"
              echo "// |        Contents are based on Antora docs.         |"
              echo "// |                                                   |"
              echo "// +---------------------------------------------------+"
            } >> "$file"

          done
        shell: bash
      - name: Replace Caption in README.adoc
        run: |
          file=README.adoc
          content=$(cat "$file")
          content="${content//= Introduction/= source2adoc}"
          echo "$content" > "$file"
        shell: bash
      - name: Replace xref with links to GitHub in adoc files in project root
        run: |
          for file in *.adoc; do
            content=$(cat "$file")
            content="${content//xref:development-guide.adoc[]/link:https://github.com/sommerfeld-io/source2adoc/blob/main/docs/modules/ROOT/pages/development-guide.adoc[Development Guide]}"
            content="${content//xref:contribute.adoc[]/link:https://github.com/sommerfeld-io/source2adoc/blob/main/CONTRIBUTING.adoc[Contribute to this Project]}"
            echo "$content" > "$file"
          done
        shell: bash
      - name: Run vhs4docker from docker compose
        run: |
          pwd
          ls -alF
          docker compose up vhs4docker --exit-code-from vhs4docker
        shell: bash
      # TODO ... source2adoc
      # TODO ... source2adoc antora
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] generate docs'

  # ----- Build stage ---------------------------

  build-image:
    runs-on: ubuntu-latest
    needs: ['lint-go']
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ env.CONTEXT }}/${{ env.DOCKERFILE }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build the Docker image and push registry
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT }}
          file: ${{ env.CONTEXT }}/${{ env.DOCKERFILE }}
          build-args: |
            VERSION=${{ github.sha }}
            COMMIT_SHA=${{ github.sha }}
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          provenance: true
          sbom: true

  # ----- Scan and Test stage -------------------

  docker-scout-cves:
    runs-on: ubuntu-latest
    needs: ['build-image']
    permissions:
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Scout CVEs for ${{ env.IMAGE_NAME }}:${{ github.sha }}
        uses: docker/scout-action@v1.13.0
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          exit-code: false
          #write-comment: ${{ github.event_name == 'pull_request' }}
          write-comment: true

  docker-scout-compare-to-rc:
    runs-on: ubuntu-latest
    needs: ['build-image']
    permissions:
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Scout Compare :${{ github.sha }} to :${{ env.IMAGE_TAG_RC }}"
        uses: docker/scout-action@v1.13.0
        with:
          command: compare
          image: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          to: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}
          exit-code: false
          #write-comment: ${{ github.event_name == 'pull_request' }}
          write-comment: true

  docker-scout-compare-to-latest:
    runs-on: ubuntu-latest
    needs: ['build-image']
    permissions:
      contents: read
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Scout Compare :${{ github.sha }} to :${{ env.IMAGE_TAG_LATEST }}"
        uses: docker/scout-action@v1.13.0
        with:
          command: compare
          image: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          to: ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_LATEST }}
          exit-code: false
          #write-comment: ${{ github.event_name == 'pull_request' }}
          write-comment: true

  inspec-image:
    runs-on: ubuntu-latest
    needs: ['build-image']
    permissions:
      contents: read
    env:
      CHEF_LICENSE: accept-no-persist
      CONTAINER_NAME: system_under_test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install Inspec
        run: curl https://omnitruck.chef.io/install.sh | sudo bash -s -- -P inspec
        shell: bash
      - name: Start system under test ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: |
          readonly IMAGE="${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          docker pull "$IMAGE"
          docker run -d --name "${{ env.CONTAINER_NAME }}" --entrypoint tail "$IMAGE" -f /dev/null
        shell: bash
      - name: Run Inspec test (linux baseline)
        run: |
          readonly exclude="/^((?!os-14).)*$/"
          inspec exec https://github.com/dev-sec/linux-baseline \
            --target "docker://${{ env.CONTAINER_NAME }}" \
            --controls "$exclude" \
            --chef-license "${{ env.CHEF_LICENSE }}" \
            --chef-license-key ${{ secrets.CHEF_INSPEC_LICENSE_KEY }} \
            --no-distinct-exit
        shell: bash
      - name: Run Inspec test (${{ env.IMAGE_NAME }})
        run: |
          (
            cd components/test-compliance || exit
            inspec exec ${{ env.IMAGE_NAME }} \
              --target "docker://${{ env.CONTAINER_NAME }}" \
              --chef-license "${{ env.CHEF_LICENSE }}" \
              --chef-license-key ${{ secrets.CHEF_INSPEC_LICENSE_KEY }} \
              --no-distinct-exit
          )
        shell: bash
      - name: Stop system under test ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        if: always()
        run: |
          docker stop --time 0 "${{ env.CONTAINER_NAME }}"
          docker rm "${{ env.CONTAINER_NAME }}"
        shell: bash

  # ----- Deploy :rc stage ----------------------

  publish-rc:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    needs: ['inspec-image']
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    steps:
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Re-tag image as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to registry
        run: |
          SRC_IMAGE="${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          TARGET_IMAGE="${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}"
          docker pull "$SRC_IMAGE"
          docker tag "$SRC_IMAGE" "$TARGET_IMAGE"
          docker push "$TARGET_IMAGE"
        shell: bash

  validate-rc:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    needs: ['publish-rc']
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Pull ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        run: docker pull ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
        shell: bash
      - name: Pull ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}
        run: docker pull ${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}
        shell: bash
      - name: Compare digests
        run: |
          sha_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ github.sha }}")
          rc_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG_RC }}")

          if [ "$sha_digest" != "$rc_digest" ]; then
            echo "[ERROR] Images are not identical"
            echo "[ERROR]      :sha | $sha_digest"
            echo "[ERROR]       :rc | $rc_digest"
            echo "[ERROR] exit code 1"
            exit 1
          else
            echo "[INFO] Images are identical"
            echo "[INFO] exit code 0"
          fi
        shell: bash

  # ----- Tag repository ------------------------

  release-code:
    runs-on: ubuntu-latest
    needs: ['validate-rc']
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Info - docs/antora.yml
        run: cat docs/antora.yml
        shell: bash
      - name: Install Node.js
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 22.2.0
      - name: semantic-release - Install
        run: |
          npm install --save-dev semantic-release
          npm install --save-dev @semantic-release/commit-analyzer
          npm install --save-dev @semantic-release/release-notes-generator
          npm install --save-dev @semantic-release/npm
          npm install --save-dev @semantic-release/exec
          npm install --save-dev @semantic-release/git
          npm install --save-dev @semantic-release/github
        shell: bash
      - name: semantic-release - Run
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        run: npx semantic-release
        shell: bash
      - name: Info - package.json
        run: cat package.json
        shell: bash
      - name: Info - docs/antora.yml
        run: cat docs/antora.yml
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] bump version'
      - name: Reset version in docs/antora.yml (back to branch name)
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{github.ref}}
          file: docs/antora.yml
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: 'docs: [Actions Bot] reset version back to branch name'

  # ----- Cleanup -------------------------------

  cleanup:
    runs-on: ubuntu-latest
    needs: ['validate-rc']
    if: always()
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Remove :${{ github.sha }} images from registry
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USER }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USER }}/${{ env.IMAGE_NAME }}/tags/${{ github.sha }}/
        shell: bash
