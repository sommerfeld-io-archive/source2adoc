---
##
# The deployment pipeline for the source2docs app is implemented using GitHub Actions. The primary
# objective of this pipeline is to assess the releasability of the application for deployment with
# every push to the `main` branch. This is achieved through a series of automated tests and
# validations (performed on all branches, but the `main` branch carries the code thatshould be
# stable and production-ready). The workflow is designed to build every artifact of the source2docs
# app and subject it to various types of tests to verify its functionality and integrity. If all
# tests are successful, indicating that the project is ready for release, a release candidate is
# generated and published to DockerHub.
#
# The deployment process for the source2docs app utilizes Docker images. Images are built and
# unit tested. Each Snapshot image is tagged with the commit-sha, providing a clear reference to
# the version of the codebase from which it was generated, and subsequently pushed to DockerHub.
# Following this initial deployment, the Snapshot Docker images undergo further testing (security,
# performance, acceptance, etc.) to assess their performance and stability. If these additional
# tests pass successfully (and the workflow is running on the `main` branch), indicating that the
# Snapshot image is robust and reliable, it is then tagged as a release candidate. Notably, release
# candidates are exclusively published from the `main` branch.
##

name: Deployment Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 1 * * 2'

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest
  COVERAGE_REPORT: components/app/go-code-coverage.out
  COVERAGE_REPORT_WORKFLOW_ARTIFACT: coverage-report
  GO_BINARY: components/app/source2adoc
  GO_BINARY_WORKFLOW_ARTIFACT: go-binary

permissions:
  contents: read

jobs:

  # ----- Commit stage - 1 - lint ---------------

  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run yamllint
        run: docker-compose up yaml
        shell: bash

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run folderslint in container
        run: docker-compose up folders
        shell: bash

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ls-lint in container
        run: docker-compose up filenames
        shell: bash

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  # ----- Commit stage - 2 ----------------------

  go-app:
    runs-on: ubuntu-latest
    needs: [
      'lint-yaml',
      'lint-folders',
      'lint-filenames',
      'shellcheck',
    ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Test app
        run: docker-compose up test-app
        shell: bash
      - name: Install go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.3'
      - name: Build go app (binary)
        run: |
          (
            cd components/app || exit
            go build .
          )
        shell: bash
      - name: Update coverage report
        run: |
          (
            docker-compose up test-app

            readonly old='github.com/sommerfeld-io/source2adoc'
            readonly new='components/app'
            sed -i "s|$old|$new|g" "${{ env.COVERAGE_REPORT }}"
          )
        shell: bash
      - name: ls -alF
        run: ls -alF
        shell: bash
      - name: ls -alF components/app
        run: ls -alF components/app
        shell: bash
      - name: Upload artifact (coverage report)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.COVERAGE_REPORT_WORKFLOW_ARTIFACT }}
          path: ${{ env.COVERAGE_REPORT }}
          if-no-files-found: error
          retention-days: 1
      - name: Upload artifact (go-binary)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GO_BINARY_WORKFLOW_ARTIFACT }}
          path: ${{ env.GO_BINARY }}
          if-no-files-found: error
          retention-days: 1

  sonarcloud:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') }}
    needs: ['go-app']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Download artifact (coverage report)
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.COVERAGE_REPORT_WORKFLOW_ARTIFACT }}
          path: ${{ github.workspace }}/components/app
      - name: ls -alF
        run: ls -alF
        shell: bash
      - name: ls -alF components/app
        run: ls -alF components/app
        shell: bash
      - name: cat ${{ env.COVERAGE_REPORT }}
        run: cat ${{ env.COVERAGE_REPORT }}
        shell: bash
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  generate-docs:
    runs-on: ubuntu-latest
    if: ${{ (github.actor != 'dependabot[bot]') }}
    needs: ['go-app']
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{github.ref}}
      - name: Download artifact (go-binary)
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.GO_BINARY_WORKFLOW_ARTIFACT }}
      - name: ls -alF
        run: ls -alF
        shell: bash
      - name: Make binary executable
        run: chmod +x source2adoc
        shell: bash
      - name: Generate docs from source code
        run: ./source2adoc generate --lang=bash
        shell: bash
      - name: Generate manpage
        run: |
          ./source2adoc manpage

          {
              echo
              echo "// +---------------------------------------------------+"
              echo "// |                                                   |"
              echo "// |        DO NOT EDIT DIRECTLY !!!!!                 |"
              echo "// |                                                   |"
              echo "// |        File is auto-generated by pipeline.        |"
              echo "// |                                                   |"
              echo "// +---------------------------------------------------+"
            } >> manpage.adoc

          mv ./manpage.adoc docs/modules/user-guide/pages/GENERATED/manpage.adoc
        shell: bash
      - name: Adjust version in docs/antora.yml
        uses: sebastian-sommerfeld-io/github-action-update-antora-yml@main
        with:
          git_ref: ${{github.ref}}
          file: docs/antora.yml
      - name: Copy Adoc files to project root
        run: |
          cp docs/modules/ROOT/pages/index.adoc README.adoc
          cp docs/modules/ROOT/pages/license.adoc LICENSE.adoc
          cp docs/modules/ROOT/pages/contribute.adoc CONTRIBUTING.adoc
          cp docs/modules/ROOT/pages/security.adoc SECURITY.adoc
        shell: bash
      - name: Add do-not-edit remark
        run: |
          for file in *.adoc; do

            {
              echo
              echo "// +---------------------------------------------------+"
              echo "// |                                                   |"
              echo "// |        DO NOT EDIT DIRECTLY !!!!!                 |"
              echo "// |                                                   |"
              echo "// |        File is auto-generated by pipeline.        |"
              echo "// |        Contents are based on Antora docs.         |"
              echo "// |                                                   |"
              echo "// +---------------------------------------------------+"
            } >> "$file"

          done
        shell: bash
      - name: Replace xref with links to GitHub
        run: |
          for file in *.adoc; do
            content=$(cat "$file")
            content="${content//xref:development-guide:development-guide.adoc[]/link:https://github.com/sommerfeld-io/source2adoc/blob/main/docs/modules/development-guide/pages/development-guide.adoc[Solution Strategy]}"
            echo "$content" > "$file"
          done
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "[Actions Bot] generate docs"
          tag_push: --force

  # ----- Commit stage (image) ------------------

  build-image:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}:${{ github.sha }}
    needs: [
      'lint-yaml',
      'lint-folders',
      'lint-filenames',
      'shellcheck',
    ]
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    strategy:
      matrix:
        include:
          - registry: docker.io
            image-name: source2adoc
            context: .
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.context }}/Dockerfile
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Container Registry ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Build the Docker image and push to ${{ matrix.registry }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          platforms: linux/amd64
          push: true
          tags: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # cache-from: type=gha
          # cache-to: type=gha,mode=max
          provenance: true
          sbom: true
      - name: Docker Scout CVEs for :${{ github.sha }}
        uses: docker/scout-action@v1.8.0
        with:
          command: cves
          image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          exit-code: false
          write-comment: ${{ github.event_name == 'pull_request' }}
      - name: Docker Scout Compare :${{ github.sha }} to :${{ env.IMAGE_TAG_RC }}"
        uses: docker/scout-action@v1.8.0
        with:
          command: compare
          image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
          to: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
          exit-code: false
          write-comment: ${{ github.event_name == 'pull_request' }}

  test-image:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    needs: ['build-image']
    permissions:
      contents: read
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: source2adoc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Dummy for ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
        run: |
          echo "CHANGE ME"
        shell: bash

  # ----- Deploy :rc stage ----------------------

  publish-rc:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }} as release candidate
    needs: ['test-image']
    if: ${{ (github.actor != 'dependabot[bot]') && (github.ref == 'refs/heads/main') }}
    permissions: # see build-image (duplicated because github actions does not support anchors)
      contents: read
      pull-requests: write
      security-events: write
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: source2adoc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry ${{ matrix.registry }}
        uses: docker/login-action@v3
        with:
          registry: ${{ matrix.registry }}
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Re-tag image as release candicate (:${{ env.IMAGE_TAG_RC }}) and deploy to ${{ matrix.registry }}
        run: |
          SRC_IMAGE="${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}"
          TARGET_IMAGE="${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}"
          docker pull "$SRC_IMAGE"
          docker tag "$SRC_IMAGE" "$TARGET_IMAGE"
          docker push "$TARGET_IMAGE"
        shell: bash
      # todo ... implement as soon as there is a latest tag on dockerhub
      # - name: Docker Scout Compare :${{ env.IMAGE_TAG_RC }}" to :${{ env.IMAGE_TAG_LATEST }}
      #   uses: docker/scout-action@v1.8.0
      #   with:
      #     command: compare
      #     image: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
      #     to: ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}
      #     exit-code: false
      #     write-comment: ${{ github.event_name == 'pull_request' }}

  # ----- Test :rc stage -------------------------

  # test-rc:
  #   runs-on: ubuntu-latest
  #   name: ${{ matrix.image-name }}
  #   needs: ['publish-rc']
  #   permissions:
  #     contents: read
  #   strategy: # see build-image (duplicated because github actions does not support anchors)
  #     matrix:
  #       include:
  #         - registry: docker.io
  #           image-name: source2adoc
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Dummy for ${{ matrix.registry }}/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
  #       run: |
  #         echo "CHANGE ME"
  #       shell: bash

  # ----- Cleanup -------------------------------

  cleanup:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    # needs: ['test-rc']
    needs: ['publish-rc']
    if: always()
    permissions:
      contents: read
    strategy: # see build-image (duplicated because github actions does not support anchors)
      matrix:
        include:
          - registry: docker.io
            image-name: source2adoc
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Remove (:${{ github.sha }}) from ${{ matrix.registry }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USER }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -X DELETE -H "Authorization: JWT ${TOKEN}" https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}/tags/${{ github.sha }}/
        shell: bash
