---
## This file defines a GitHub Actions workflow for releasing the project. The purpose of this
## workflow is to automate the release process of the project. It specifies the steps and
## conditions for creating a release whenever a new tag and GitHub release is pushed to the
## repository.

name: Release

on:
  release:
    types: [created]

env:
  IMAGE_TAG_RC: rc
  IMAGE_TAG_LATEST: latest

jobs:
  publish-website:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      # TODO copy files out of the container (the website, avoid building the website again)
      # TODO upload via FTP to webspace

  publish-release:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    env:
      DOCS_FILE: README # with path, without extension
    permissions:
      contents: read
    strategy:
      matrix:
        image-name: ['source2adoc', 'source2adoc-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy to DockerHub
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          TAG="${TAG#v}"

          echo "New version tag = $TAG"

          docker pull "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}"

          docker tag "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}" "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}"
          docker tag "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}" "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:$TAG"

          docker push "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}"
          docker push "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:$TAG"
        shell: bash
      - name: Convert ${{ env.DOCS_FILE }} from Asciidoc to Markdown for DockerHub description
        run: |
          sudo apt-get update
          sudo apt-get install -y pandoc asciidoc
          asciidoc -b docbook ${{ env.DOCS_FILE }}.adoc
          mv ${{ env.DOCS_FILE }}.xml ./UPLOAD.xml
          pandoc -f docbook -t markdown_strict UPLOAD.xml -o UPLOAD.md
        shell: bash
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./UPLOAD.md

  validate-release:
    runs-on: ubuntu-latest
    name: ${{ matrix.image-name }}
    needs: ['publish-release']
    permissions:
      contents: read
    strategy:
      matrix:
        image-name: ['source2adoc', 'source2adoc-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Pull ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
        run: docker pull ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ github.sha }}
        shell: bash
      - name: Pull ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
        run: docker pull ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
        shell: bash
      - name: Compare digests
        run: |
          TAG="${GITHUB_REF#refs/tags/}"
          TAG="${TAG#v}"

          rc_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}")
          latest_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}")
          tag_digest=$(docker inspect --format='{{index .RepoDigests 0}}' "${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:$TAG")

          if [ "$rc_digest" != "$latest_digest" ] || [ "$rc_digest" != "$tag_digest" ] || [ "$tag_digest" != "$latest_digest" ]; then
            echo "[ERROR] Images are not identical"
            echo "[ERROR]   :latest | $latest_digest"
            echo "[ERROR]       :rc | $rc_digest"
            echo "[ERROR] exit code 1"
            exit 1
          else
            echo "[INFO] Images are identical"
            echo "[INFO] exit code 0"
          fi
        shell: bash

  docker-scout-release:
    runs-on: ubuntu-latest
    needs: publish-release
    name: ${{ matrix.image-name }}
    permissions:
      contents: read
    env:
      CHEF_LICENSE: accept-no-persist
      CONTAINER_NAME: system_under_test
    strategy:
      matrix:
        image-name: ['source2adoc', 'source2adoc-docs']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Docker Scout CVEs for ${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}
        uses: docker/scout-action@v1.13.0
        with:
          command: cves
          image: ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}
          exit-code: false
          #write-comment: ${{ github.event_name == 'pull_request' }}
          write-comment: true
      - name: Docker Scout Compare :${{ env.IMAGE_TAG_RC }}" to :${{ env.IMAGE_TAG_LATEST }}
        uses: docker/scout-action@v1.13.0
        with:
          command: compare
          image: ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_RC }}
          to: ${{ secrets.DOCKERHUB_USER }}/${{ matrix.image-name }}:${{ env.IMAGE_TAG_LATEST }}
          exit-code: false
          write-comment: true
