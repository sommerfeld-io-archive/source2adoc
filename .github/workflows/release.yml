---
## This GitHub Actions workflow automates the release process for the source2adoc software project.
## Its main objective is to create new releases while ensuring consistency and reliability in the
## release management.
##
## It automatically creates version tags in the project's repository, based on the contents of
## `metadata/NEXT_VERSION`.
##
## The workflow generates release notes and metadata, which are used to create GitHub releases
## associated with the version tags. This helps maintain a clear record of all project releases and
## their corresponding changes. However, in case an intro text or description is needed, it must be
## added manually after the worflow succeeded.
##
## The workflow handles artifact deployment, such as publishing Docker images to DockerHub
## (including updating the description on DockerHub).
##
## It's essential to emphasize that this GitHub Actions workflow is the authorized way to create
## git tags and releases. The workflow is triggered manually through the GitHub UI. All other ways
## to create releases are discouraged to maintain a standardized and robust release process.
##
## By relying on this automated pipeline for releases, the project streamlines its release workflow,
## reduces the likelihood of errors, and provides users with access to stable and up-to-date software
## versions.

name: Release

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  detect-version:
    runs-on: ubuntu-latest
    outputs:
      NEXT_VERSION: ${{ steps.vars.outputs.NEXT_VERSION }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Read NEXT_VERSION
        id: vars
        run: echo "NEXT_VERSION=$(cat metadata/NEXT_VERSION)" >> $GITHUB_OUTPUT
        shell: bash

  update-version:
    needs: detect-version
    permissions:
      contents: write
    uses: sommerfeld-io/.github/.github/workflows/module-release-antora-version.yml@main
    with:
      version: ${{ needs.detect-version.outputs.NEXT_VERSION }}

  deploy-release:
    runs-on: ubuntu-latest
    needs: update-version
    env:
      IMAGE: sommerfeldio/source2adoc
      DOCS_FILE: README # without extension
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Print Tag
        run: |
          cat metadata/NEXT_VERSION
        shell: bash
      - name: Deploy to DockerHub
        run: |
          VERSION="$(cat metadata/NEXT_VERSION)"
          docker pull "$IMAGE:rc"

          if [[ "$VERSION" != *"-alpha"* && "$VERSION" != *"-beta"* ]]; then
            docker tag "$IMAGE:rc" "$IMAGE:latest"
            docker push "$IMAGE:latest"
          fi

          docker tag "$IMAGE:rc" "$IMAGE:$VERSION"
          docker push "$IMAGE:$VERSION"
        shell: bash
      - name: Convert README from Asciidoc to Markdown for DockerHub description
        run: |
          sudo apt-get install -y pandoc asciidoc
          asciidoc -b docbook ${{ env.DOCS_FILE }}.adoc
          mv ${{ env.DOCS_FILE }}.xml ./UPLOAD.xml
          pandoc -f docbook -t markdown_strict UPLOAD.xml -o UPLOAD.md
        shell: bash
      - name: Update DockerHub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE }}
          short-description: ${{ github.event.repository.description }}
          readme-filepath: ./UPLOAD.md
      - name: Create tag and GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_REPO_AND_PROJECT }}
        # If a matching git tag does not yet exist, one will automatically be created
        # from the latest state of the default branch.
        run: |
          VERSION="$(cat metadata/NEXT_VERSION)"

          echo "[INFO] Create release"
          if [[ "$VERSION" != *"-alpha"* && "$VERSION" != *"-beta"* ]]; then
            gh release create "v$VERSION" --generate-notes
          else
            gh release create "v$VERSION" --prerelease --generate-notes
          fi
        shell: bash

  reset-version:
    needs: deploy-release
    if: always()
    permissions:
      contents: write
    uses: sommerfeld-io/.github/.github/workflows/module-release-antora-version.yml@main
    with:
      version: refs/heads/main

  set-current-version:
    runs-on: ubuntu-latest
    needs: deploy-release
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Set current version
        run: cp metadata/NEXT_VERSION metadata/CURRENT_VERSION
        shell: bash
      - name: Commit and push
        uses: EndBug/add-and-commit@v9.1.4
        with:
          author_name: sebastian
          author_email: sebastian@sommerfeld.io
          message: "[Actions Bot] set current version"
